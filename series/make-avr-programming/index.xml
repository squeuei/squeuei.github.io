<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Make: AVR Programming on Constellation</title>
    <link>https://squeuei.github.io/series/make-avr-programming/</link>
    <description>Recent content in Make: AVR Programming on Constellation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 19 Aug 2016 15:31:30 +0900</lastBuildDate><atom:link href="https://squeuei.github.io/series/make-avr-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Make: AVR Programming pt.04</title>
      <link>https://squeuei.github.io/post/2016-08-19/make-avr-programming-pt.04/</link>
      <pubDate>Fri, 19 Aug 2016 15:31:30 +0900</pubDate>
      
      <guid>https://squeuei.github.io/post/2016-08-19/make-avr-programming-pt.04/</guid>
      <description>http://squeuei.hatenablog.com/entry/2016/08/18/152509
Chapter 10 タイマを使うときのチェックリスト  どのタイマを使うか決める。8bitでよければTimer 0か2、16bitが必要ならTimer 1。 どのモードが必要なのかを決める。TCCRnAのWGMn0とWGMn1、TCCRnBのWGMn2をセットする。 a. 数えたかったりタイミングを作りたいのならNormalモード（設定の必要なし） b. 時間の基準や周波数を作りたいのならCTCモードを使う。WGMn1をセットする。 c. PWMを使いたいならfast PWMモード。WGMn0とWGMn1をセットする。PWM周波数を変えなくてもいいならWGMn2もセットする。 直接出力するならTCCRnAのCOMxAとCOMxBをセットする。 分周を決めたらTCCRnBのCSnxビットをセットする。 比較する数値を使うならOCRnAやOCRnBにデフォルトの値を設定する。PWMを使うならDDRの出力設定も忘れないこと。 タイマで割り込みを使う？ a. Normalモードならカウンタオーバフロー割り込みを有効にするため、TIMSKnのTOIEnをセットする。 b. PWMやCTCモードなら比較での割り込みを有効にするため、TIMSKnのOCIEnAとOCIEnBをセットする。 c. sei()するのを忘れないように。  Chapter 11 　サーボのようなデバイスとAVRの電源はなるべく分けた方がいい。AVRの動作が不安定になる恐れがあるから。
Chapter 12 　高い電圧を高分解能で取得したいときは、分圧とオーバーサンプリングを使う。 また、AVRの場合はADC以外のクロックを停止することでノイズを低減するADCノイズリダクションスリープモードがあるので、活用すると良い。
オーバーサンプリング 　オーバーサンプリングは中心極限定理に基づいていて、たとえば10ビットADCで16個のサンプルを取得した後、4で割る（=2ビットシフトする）ことで12ビットの結果が得られる。 nビット余計に欲しいときは、$2^{2^n}$回のサンプリングと$2^n$回の割り算（=n回のビットシフト）が必要。
　オーバーサンプリングは、サンプリング周波数よりもゆっくり変化する信号に対して適用する。 速度、精度、コストはトリレンマだ。 16回のオーバーサンプリングは16倍遅くなるけど2ビット分の精度をただで手に入れられる。 高速で正確なADCが欲しいなら良いADCを買えばいいけど、それにはお金がかかるのだ。
0～5V以外の信号を計りたいときは  1V以下のものを計りたいときはAREFを内蔵の1.1Vリファレンス電源にすればよい。 1V～5Vのものを計りたいときはAREFを内蔵の1.1Vリファレンス電源にして、その上で信号を分圧すればよい。 5V以上のものを計りたいときは信号を分圧すればよい。  スリープ 　avr/sleep.hをインクルードして、set_sleep_mode(SLEED_MODE_ADC);（実はSMCR |= (1 &amp;lt;&amp;lt; SM0);するのと同じ）と、ADCSRA |= (1 &amp;lt;&amp;lt; ADIE);（ADC割り込み有効化）、sei()をすればよい。ただし、sleepが終わるときにISRが呼ばれるので、EMPTY_INTERRUPT(ADC_vect);なりしておく必要がある。
EWMA(Exponentially Weighted Moving Averages) 　ふつうの移動平均では移動平均する数だけメモリを消費する。 また、C言語の除算では切り捨ての問題があるから、なるべく除算の階数を減らしたい。 EWMAなら2つの変数、現在の値$x_t$と過去の平均値$y_{t-1}$だけでいい。</description>
    </item>
    
    <item>
      <title>Make: AVR Programming pt.03</title>
      <link>https://squeuei.github.io/post/2016-08-18/make-avr-programming-pt.03/</link>
      <pubDate>Thu, 18 Aug 2016 15:25:09 +0900</pubDate>
      
      <guid>https://squeuei.github.io/post/2016-08-18/make-avr-programming-pt.03/</guid>
      <description>http://squeuei.hatenablog.com/entry/2016/08/16/201654
Chapter 8 　割り込みを扱うときはISR()を使う。厳密に言うところは関数じゃなくてマクロ。 引数として割り込みベクタを与える。割り込みベクタの定義はio.hに書いてある。
外部割り込み 　外部割り込みを有効化するときは、2段階ある事を忘れないようにする。
 使いたい割り込みベクタを有効化する 割り込みシステム全体をsei()で有効化する。  　普通は割り込みに入るときにglobal interrupt enableがオフになるので、割り込み中に更なる割り込みが発生することは無い。それを許可したい場合は、ISRのなかでsei()を呼ぶか、ISR_NOBLOCKでISRを定義するかのどっちかにする。
　割り込みを生じさせたくない場合はcli()を使ってglobal interrupt enableをオフにする。再開したいときはsei()を。
ピン変化割り込み 　Pin-Change InterruptではPxyPCINTxが対応する。ただしxはアルファベットと数字で対応してるのでややこしい。PByはPCINT0,PCyはPCINT1、PDyはPCINT2みたいに。 割り込みベクタは全部のピンで共通なので、ISRの中でどのピンからの割り込みなのかを判定して処理しないといけない。
 制御レジスタ(PCICR)で使いたい割り込みを有効化する。 使いたいピンをピンマスクレジスタで設定する。 global interrupt enableをsei()で有効化する。  　割り込みを受けるときは
 同じバンクの複数のピンからトリガを受ける場合にはbit_is_clear(BUTTON_IN, BUTTON)のようにどのピンからの割り込みなのかを調べる。 同じバンクに一つしかトリガを受けない場合には、立ち上がりと立ち下がりの両方に反応することに注意。どちらなのかを確認する必要がある。  ISRで変数を操作したいとき 　ISRは引数を取れないので、mainからもISRからもアクセスできるグローバル変数を宣言する。 ただし、その変数はvolataileを付けること。つけないと、一度もmain内で変更されない変数とみなされて、コンパイラが定数に変更してしまうことがある。 空のforループを回すときにも同じ事をする。
Chapter 9 タイマ 　タイマにはノーマルモードとCTCモードがある。 ノーマルモードではカウンタがオーバフローするまで動作する。タイマの種類にもよるが255あるいは65535。 CTCモードではOCRnAレジスタで指定した値までカウントする。 ATMega168の場合はTimer1が16bit、そのほかは8bit。現在のタイマーの値はTCNTxに格納されている。
　CTCモードの場合はTCCRxAレジスタでWGM01を設定する。また、outputモードにする場合はTCCRxAレジスタでCOMxA0を設定する。また、outputモードにする場合は Output Compare Resister OCRxAビットに
　どのモードにせよ、プリスケーラを設定しなければ、タイマは動作しない。CSx2、CSx1、CSx0の値を、データシートの表にしたがって設定する。
CPUスピード 　CPUスピードを変える方法には“ヒューズ”を書き換える方法と、ソースコードの中で設定する方法の2つがある。
　この本のサンプルコードに付属するMakefileではmake set_fast_fuseすることで8MHz動作に変更される。戻すときはmake set_default_fuses。
　そのほかにもAVRDUDEで設定変更ができるけど、例えばSPIEN-enable fuse bitを変更してしまうとSPIでのプログラミングができなくなったり（設定を戻すこともSPIではできない！）、CPUクロックソースを外部クロックに設定してしまったり（こっちはクロックや他のマイコンから1MHzの信号を印可してやればよいので、まだ対処しやすい）するので、注意が必要。</description>
    </item>
    
    <item>
      <title>Make: AVR Programming pt.02</title>
      <link>https://squeuei.github.io/post/2016-08-16/make-avr-programming-pt.02/</link>
      <pubDate>Tue, 16 Aug 2016 20:16:54 +0900</pubDate>
      
      <guid>https://squeuei.github.io/post/2016-08-16/make-avr-programming-pt.02/</guid>
      <description>　まだまだ続く。けど夏休み中に終わらせるのは無理っぽい。
http://squeuei.hatenablog.com/entry/2016/08/15/001834
Chapter 6 　ボタンスイッチをマイコンのデジタルIOに接続する時は、プルアップ抵抗を使うこと。プルアップ抵抗はボタンがオープンの時にレベルを確実にハイにするために必要な抵抗。ただし、AVRの場合は全てのピンにプルアップ抵抗が組み込まれていて、設定で有効化できる。
　Chapter 2で言及したように、DDRxが0（入力）のとき、PORTxはプルアップの設定になる。
プッシュボタンを使うときのチェックリスト  DDRxレジスタを入力にする。 プルアップのために抵抗素子を使わない時は、PORTxで内蔵のプルアップを有効にする。 コードの中でボタンの電圧を読む。 ボタンが押されてる間に何かをしたいのか、ボタンが押されたときに何かをしたいのかをヨーク考える。 ボタンが押された時に何かをしたいのなら、デバウンシングすることを考える。たとえば一度押されたことを確認して、さらに一定時間後にも押されてたら、そのとき初めて何かを実行する、のような。  Chapter 7 LDRについて 　LDRを使う際、組み合わせる抵抗は
[tex:{\displaystyle \mathrm{R} =\sqrt{ \mathrm{R}_{\mathrm{LDR}\mathrm{bright}}\cdot\mathrm{R}_{\mathrm{LDR}\mathrm{dark}} } }]
で決定するのがよい。
ADCを使う時の注意 　アナログ回路設計のグッドプラクティスとしては、高速なスイッチングがあり、スパイクが乗るチップと、性格で安定した値が要求されるADCとで、独立した電源を供給するのが望ましい。特に、小信号や高周波信号を扱う時には重要となる。
 AVCCに給電した？　システムのVccからの差は0.3 V以内でなきゃダメ。 ADMUXのREFSxを設定した？　デフォルトではAREFの外部電圧を基準とする。AVCCを基準にしたいのならREFS0をセットしないといけない。 ADCのプレスケーラを設定した？　ADCにはクロック源が必要。 ADENを設定してADCを有効化した？ マルチプレクサで正しいchを選択した？　設定はbitじゃなくてbinaryだよ？ 最後に、ADCの値を別々に読むときはADCL（下位ビット）から読み込んでる？　10bit読むときはADCLを読み込んでからじゃないとADCH（上位ビット）は更新されないよ？  　上記の設定をしてから、ADCSRAのADSCを設定することで、ADCは変換を開始する。
　ADCSRAのADATEを有効にしてフリーランニングを使う時も、最初の一回はプログラマがADSCを設定しなきゃいけない。
　ADLAR=0のときはADCHの下位2ビットとADCLの8ビットがADCの出力となる。
　ADLAR=1のときはADCHの8ビットとADCLの上位2ビットがADCの出力となる。
　ADMUXでマルチプレクサを設定するときは、上位4ビットの値を保ったまま、下位4ビットを設定しなきゃいけない。 よくやるのはこんな感じ。
ADMUX = (0xf0 &amp;amp; ADMUX) | channel;  </description>
    </item>
    
    <item>
      <title>Make: AVR Programming pt.01</title>
      <link>https://squeuei.github.io/post/2016-08-15/make-avr-programming-pt.01/</link>
      <pubDate>Mon, 15 Aug 2016 00:18:34 +0900</pubDate>
      
      <guid>https://squeuei.github.io/post/2016-08-15/make-avr-programming-pt.01/</guid>
      <description>買ってから優に一年間放置していた“Make: AVR Programming”を夏休みに読んでしまおう計画。
http://squeuei.hatenablog.com/entry/2015/08/11/212000
Chapter 1 　AVRISPmk2を入手しておいたのだけど、こいつは自分で+5Vを供給してくれないので、ACアダプタでブレッドボードに5Vを給電するとかしないといけない。かつ、私の環境ではavrdudeでうまくmake flashしてくれないので、Arduino ISPを活用することにする。ISP買った意味がない。
　システムやユーザの環境変数を通すのが嫌だったので、PATHを通すバッチファイルを書いて、そこから操作することにする。
PATH=%PATH%;foo\bar\avr8-gnu-toolchain\bin;hoge\fuga\avrdude_utilities; cd mado\homu\AVR-Programming  といった内容の.batファイル（ここでは安易にavr.batとした）を作成した後、エクスプローラから
C:\Windows\System32\cmd.exe /k &amp;quot;yui\azu\avr&amp;quot;  というショートカットを作る。フォルダやファイルの場所は各自修正のこと。ショートカットがリンクする先の最後にあるavrは.batファイルのファイル名にする。拡張子を付けないのが個人的にポイントだった。
　このショートカットを開けば、コンパイラとユーティリティへのPATHが通ったコマンドプロンプトが開く。
　サンプルコードを書き込む際には、Makefileで
PROGRAMMER_TYPE = avrisp PROGRAMMER_ARGS = -b 19200 -P com3  などとして、PATHが通ったコマンドプロンプトからmake flashする。
Chapter 2 　RAMに変数をつくることと、ピンへの書き込みやピンの入出力設定は同じインタフェース（代入）で行われるけど、これは実際に同じ事をレジスタに対して行っているから。そのレジスタの情報はio.hに格納されてる。
重要なハードウェアレジスタ   DDRx : data-direction registers port x
インプットかアウトプットかを決める。
  PORTx port x data registers
 アウトプットに設定したとき：high or lowを設定 インプットに設定したとき：pull-upするかどうか(chapter 6参照)を設定    PINx port x input pins address</description>
    </item>
    
    <item>
      <title>Make: AVR Programming pt.00</title>
      <link>https://squeuei.github.io/post/2015-08-11/make-avr-programming-pt.00/</link>
      <pubDate>Tue, 11 Aug 2015 21:20:00 +0900</pubDate>
      
      <guid>https://squeuei.github.io/post/2015-08-11/make-avr-programming-pt.00/</guid>
      <description>Make: AVR Programmingのために。
 必要なもの 今後AVRライフを送る上で必要不可欠なもの  ブレッドボード ジャンパワイヤ 電気抵抗  LED用 200-500 Ω 1 kΩを幾つか 最低でも5つの10k Ω   ISPプログラマ か Arduino Atmel ATmega168/168A/168P/168PA DIPパッケージ USB-シリアル変換器（FTDIのがおすすめ） 色を問わずLED10個と、適切な大きさ（200-500 Ω）の抵抗（抵抗に多すぎるということはない） もしあれば5 Vの直流電源  初級編  8 Ωのいわゆるふつうのスピーカと10-100uFのキャパシタ 2個以上のNormally Openなプッシュボタン（安いタクトスイッチでOK） 最低5個の2N7000 MOSFET 2つのLDR(photoresitor, CDS) 2つのポテンショメーター(可変抵抗、10 kΩが理想だけど1 kΩ以上なら大丈夫）  中級編  ピエゾディスク（圧電素子？） サーボモータ 分解していいレーザポインタ I2Cデバイス（本書内ではLM75温度センサを使っている） SPIデバイス（本書内では25LC256 32Kbit SPI EEPROMを使っている）  モータとHブリッジ  DCモータ(3-12 Vがいい） Hブリッジを構成するためのMOSFET（本書内ではIRF9530を2つ、IRF530sを2つ使用） モータドライバ SN754410 か L293D ステッピングモータと電源 スイッチのようにはたらくデバイス たとえば  リレー SSR(Solid State Relay) ダーリントントランジスタ (e.</description>
    </item>
    
  </channel>
</rss>
